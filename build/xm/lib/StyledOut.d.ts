/// <reference path="../../../src/xm/_ref.d.ts" />
import miniwrite = require('miniwrite');
import ministyle = require('ministyle');
declare class StyledOut {
    private _style;
    private _line;
    private _tabSize;
    nibs: {
        arrow: string;
        double: string;
        single: string;
        bullet: string;
        edge: string;
        ruler: string;
        shell: string;
        dash: string;
        decl: string;
        none: string;
    };
    constructor(write?: miniwrite.Line, style?: ministyle.Style);
    write(str: any): StyledOut;
    line(str?: any): StyledOut;
    ln(): StyledOut;
    span(str: any): StyledOut;
    block(str: any): StyledOut;
    clear(): StyledOut;
    ruler(levels?: number): StyledOut;
    heading(str: any, level?: number): StyledOut;
    plain(str: any): StyledOut;
    accent(str: any): StyledOut;
    signal(str: any): StyledOut;
    muted(str: any): StyledOut;
    space(): StyledOut;
    sp(): StyledOut;
    success(str: any): StyledOut;
    warning(str: any): StyledOut;
    error(str: any): StyledOut;
    cond(condition: boolean, str: any, alt?: any): StyledOut;
    alt(str: any, alt: any): StyledOut;
    inspect(value: any, depth?: number, showHidden?: boolean): StyledOut;
    stringWrap(str: string): StyledOut;
    glue(out: StyledOut): StyledOut;
    swap(out: StyledOut): StyledOut;
    label(label: string): StyledOut;
    indent(levels?: number): StyledOut;
    bullet(accent?: boolean): StyledOut;
    index(num: any): StyledOut;
    info(accent?: boolean): StyledOut;
    report(accent?: boolean): StyledOut;
    note(accent?: boolean): StyledOut;
    shell(accent?: boolean): StyledOut;
    dash(accent?: boolean): StyledOut;
    edge(accent?: boolean): StyledOut;
    tweakURI(str: string, trimHttp?: boolean, wrapAngles?: boolean): StyledOut;
    tweakPath(str: string, muted?: boolean): StyledOut;
    tweakPunc(str: string, muted?: boolean): StyledOut;
    tweakBraces(str: string, muted?: boolean): StyledOut;
    tweakExp(str: string, expr: RegExp, muted?: boolean): StyledOut;
    unfunk(): StyledOut;
    finalise(): void;
    useStyle(mini: ministyle.Style): StyledOut;
    useWrite(mini: miniwrite.Line): StyledOut;
    getWrite(): miniwrite.Chars;
    getStyle(): ministyle.Style;
}
export = StyledOut;
